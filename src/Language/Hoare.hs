{-# LANGUAGE DataKinds     #-}
{-# LANGUAGE DeriveFunctor #-}
{-# LANGUAGE GADTs         #-}
{-|
Module      : Language.Hoare
Description : Hoare logic proofs
Copyright   : (c) Robert `Probie' Offner, 2018
License     : MIT
Maintainer  : ludvikgalois@gmail.com

A module for defining Hoare Logic proofs
-}
module Language.Hoare
  ( HoareTriple (..), ProofStep (..), ProofValidity (..)
  , StringProofStep, StringProof, LinearProofStep, LinearProof
  , compileLinearProof, checkProof) where

import qualified Language.CPL              as L
import           Language.Imp              (ImpType (..))
import qualified Language.Imp              as I

import           Data.Array
import           Data.Text.Prettyprint.Doc hiding (line)

-- | A Hoare Triple
data HoareTriple ŒΩ = Hoare
  { _precon  ‚à∑ L.Prop ŒΩ -- ^ The precondition
  , _code    ‚à∑ I.Statement ŒΩ -- ^ The code block
  , _postcon ‚à∑ L.Prop ŒΩ -- ^ The postcondition
  }
  deriving (Show, Eq, Functor)

-- | A single proof step, with references of type œÑ
data ProofStep œÑ ŒΩ where
  -- | The Assignment Axiom
  Assign ‚à∑ ŒΩ ‚Üí I.Expr '‚Ñ§ ŒΩ ‚Üí L.Prop ŒΩ ‚Üí ProofStep œÑ ŒΩ
  -- | Precondition weakening
  PreconWeaken ‚à∑ L.Prop ŒΩ ‚Üí œÑ ‚Üí ProofStep œÑ ŒΩ
  -- | Postcondition strengthening
  PostconStrengthen ‚à∑ L.Prop ŒΩ ‚Üí œÑ ‚Üí ProofStep œÑ ŒΩ
  -- | The sequencing rule
  Sequence ‚à∑ œÑ ‚Üí œÑ ‚Üí ProofStep œÑ ŒΩ
  -- | The if rule
  If ‚à∑ I.Expr 'ùîπ ŒΩ ‚Üí œÑ ‚Üí œÑ ‚Üí ProofStep œÑ ŒΩ
  -- | The while rule
  While ‚à∑ I.Expr 'ùîπ ŒΩ ‚Üí œÑ ‚Üí ProofStep œÑ ŒΩ
  deriving (Show, Functor)

-- Pull out the dependencies of a proof step
containedTriples ‚à∑ ProofStep œÑ ŒΩ ‚Üí [œÑ]
containedTriples p = case p of
  Assign{}              ‚Üí []
  PreconWeaken _ t      ‚Üí [t]
  PostconStrengthen _ t ‚Üí [t]
  Sequence t1 t2        ‚Üí [t1,t2]
  If _ t1 t2            ‚Üí [t1,t2]
  While _ t             ‚Üí [t]

replaceVar ‚à∑ (Eq ŒΩ) ‚áí ŒΩ ‚Üí L.NumExpr ŒΩ ‚Üí L.Prop ŒΩ ‚Üí L.Prop ŒΩ
replaceVar var new prop = case prop of
  L.Not prop' ‚Üí L.Not (replaceVar var new prop')
  L.BinProp op e1 e2 ‚Üí L.BinProp op (replaceVar var new e1)
                                    (replaceVar var new e2)
  L.Comparison op e1 e2 ‚Üí L.Comparison op (updateExpr e1) (updateExpr e2)
  x ‚Üí x
  where
    updateExpr expr = case expr of
        L.Var v | v == var ‚Üí new
                | otherwise ‚Üí expr
        L.Lit{} ‚Üí expr
        L.UnNumOp op expr' ‚Üí L.UnNumOp op (updateExpr expr')
        L.BinNumOp op e1 e2 ‚Üí L.BinNumOp op (updateExpr e1) (updateExpr e2)

-- Conversion boilerplate
propNum ‚à∑ I.Expr '‚Ñ§ ŒΩ ‚Üí L.NumExpr ŒΩ
propNum expr = case expr of
  I.Var v                  ‚Üí L.Var v
  I.IntLit n               ‚Üí L.Lit n
  I.UnaryOp I.Negate expr' ‚Üí L.UnNumOp L.Negate (propNum expr')
  I.BinaryOp I.Add e1 e2   ‚Üí L.BinNumOp L.Add (propNum e1) (propNum e2)
  I.BinaryOp I.Sub e1 e2   ‚Üí L.BinNumOp L.Sub (propNum e1) (propNum e2)
  I.BinaryOp I.Mult e1 e2  ‚Üí L.BinNumOp L.Mult (propNum e1) (propNum e2)
  I.BinaryOp I.Div e1 e2   ‚Üí L.BinNumOp L.Div (propNum e1) (propNum e2)
  I.BinaryOp I.Mod e1 e2   ‚Üí L.BinNumOp L.Mod (propNum e1) (propNum e2)
  I.BinaryOp I.Pow e1 e2   ‚Üí L.BinNumOp L.Pow (propNum e1) (propNum e2)

propBool ‚à∑ I.Expr 'ùîπ ŒΩ ‚Üí L.Prop ŒΩ
propBool expr = case expr of
  I.BoolLit True ‚Üí L.TT
  I.BoolLit False ‚Üí L.FF
  I.UnaryOp I.Not expr' ‚Üí L.Not (propBool expr')
  I.BinaryOp I.Iff e1 e2 ‚Üí L.BinProp L.Iff (propBool e1) (propBool e2)
  I.BinaryOp I.Xor e1 e2 ‚Üí L.BinProp L.Iff (propBool e1) (L.Not (propBool e2))
  I.BinaryOp I.And e1 e2 ‚Üí L.BinProp L.And (propBool e1) (propBool e2)
  I.BinaryOp I.Or e1 e2 ‚Üí L.BinProp L.Or (propBool e1) (propBool e2)
  I.BinaryOp I.Eq e1 e2 ‚Üí L.Comparison L.Eq (propNum e1) (propNum e2)
  I.BinaryOp I.Neq e1 e2 ‚Üí L.Comparison L.Neq (propNum e1) (propNum e2)
  I.BinaryOp I.Lt e1 e2 ‚Üí L.Comparison L.Lt (propNum e1) (propNum e2)
  I.BinaryOp I.Le e1 e2 ‚Üí L.Comparison L.Le (propNum e1) (propNum e2)
  I.BinaryOp I.Gt e1 e2 ‚Üí L.Comparison L.Gt (propNum e1) (propNum e2)
  I.BinaryOp I.Ge e1 e2 ‚Üí L.Comparison L.Ge (propNum e1) (propNum e2)

removeProp ‚à∑ (Eq ŒΩ) ‚áí L.Prop ŒΩ ‚Üí L.Prop ŒΩ ‚Üí L.Prop ŒΩ
removeProp expr (L.BinProp L.And p q)
  | expr == p && expr == q = L.TT
  | expr == q = p
  | expr == p = q
  | otherwise = L.BinProp L.And (removeProp expr p) (removeProp expr q)
removeProp expr prop
  | expr == prop = L.TT
  | otherwise = prop

has ‚à∑ (Eq ŒΩ) ‚áí L.Prop ŒΩ ‚Üí L.Prop ŒΩ ‚Üí Bool
has p q                     | p == q = True
has (L.BinProp L.And p q) r = p `has` r || q `has` r
has _ _                     = False

-- Convert a `ProofStep` to a `HoareTriple` (mainly for pretty printing)
proofToTriple ‚à∑ (Eq ŒΩ) ‚áí ProofStep (HoareTriple ŒΩ) ŒΩ ‚Üí HoareTriple ŒΩ
proofToTriple proof = case proof of
  Assign var expr prop ‚Üí
    Hoare (replaceVar var (propNum expr) prop) (I.Assign var expr) prop
  PreconWeaken precon triple ‚Üí triple {_precon = precon}
  PostconStrengthen postcon triple ‚Üí triple {_postcon = postcon}
  Sequence t1 t2 ‚Üí Hoare { _precon = _precon t1
                         , _code = I.Seq (_code t1) (_code t2)
                         , _postcon = _postcon t2
                         }
  If p t1 t2 ‚Üí Hoare { _precon = removeProp (propBool p) (_precon t1)
                     , _code = I.If p (_code t1) (_code t2)
                     , _postcon = _postcon t1
                     }
  While p t1 ‚Üí Hoare { _precon = L.BinProp L.And (_postcon t1) (propBool p)
                     , _code = I.While p (_code t1)
                     , _postcon = L.BinProp L.And (_postcon t1)
                                                  (L.Not (propBool p))
                     }

-- | A type for proof validity
data ProofValidity
  = NotValid -- ^ The proof is not valid
  | Unknown -- ^ We can't decide if the proof is valid or not
  | Valid -- ^ The proof is valid
  deriving (Eq, Show, Ord)

-- | A proof step with Hoare triples (with string variables) for previous steps
type StringProofStep = ProofStep (HoareTriple String) String
-- | A proof step with line numbers for previous steps
type LinearProofStep = ProofStep Int String
-- | A proof built from `StringProofStep`
type StringProof = [StringProofStep]
-- | A proof built from `LinearProofStep`
type LinearProof = [LinearProofStep]

-- | Compile a `LinearProof` to a `StringProof`
compileLinearProof
  ‚à∑ LinearProof -- ^ The input proof
  ‚Üí Either String StringProof -- ^ Either the output proof or an error message
compileLinearProof proof
  | validOrdering = Right (elems compiled)
  | otherwise = Left "Invalid References"
  where
    len = length proof
    validOrdering = and [all ((&&) <$> (<n) <*> (>= 1)) (containedTriples x)
                        | (n,x) ‚Üê zip [1..] proof]
    compiled = listArray (1, len) (map compileLine proof)
    fetch n = proofToTriple (compiled ! n)
    compileLine line = case line of
      Assign var expr prop ‚Üí Assign var expr prop
      PreconWeaken precon lineNum ‚Üí PreconWeaken precon (fetch lineNum)
      PostconStrengthen precon lineNum ‚Üí
        PostconStrengthen precon (fetch lineNum)
      Sequence lineNum1 lineNum2 ‚Üí Sequence (fetch lineNum1) (fetch lineNum2)
      If prop lineNum1 lineNum2 ‚Üí If prop (fetch lineNum1) (fetch lineNum2)
      While prop lineNum ‚Üí While prop (fetch lineNum)

-- Our default proof time
proofTime ‚à∑ Int
proofTime = 2 * second
  where
    second = 1000

checkProp ‚à∑ L.Prop String ‚Üí IO ProofValidity
checkProp prop = do
  valid ‚Üê L.prove proofTime prop
  return $ case valid of
      Nothing    ‚Üí Unknown
      Just False ‚Üí NotValid
      Just True  ‚Üí Valid

-- Is an individual proof step valid?
validProofStep ‚à∑ StringProofStep ‚Üí IO ProofValidity
validProofStep step = case step of
  Assign{} ‚Üí return Valid
  PreconWeaken newcon Hoare{_precon = oldcon} ‚Üí
    checkProp (L.BinProp L.Imp newcon oldcon)
  PostconStrengthen newcon Hoare{_postcon = oldcon} ‚Üí
    checkProp (L.BinProp L.Imp oldcon newcon)
  Sequence e1 e2
    | _postcon e1 == _precon e2 ‚Üí return Valid
    | otherwise ‚Üí return NotValid
  If p e1 e2
    | _postcon e1 == _postcon e2,
      p' ‚Üê propBool p,
      removeProp p' (_precon e1) == removeProp (L.Not p') (_precon e2),
      _precon e1 `has` p',
      _precon e2 `has` L.Not p' ‚Üí return Valid
    | otherwise ‚Üí return NotValid
  While p e1
    | p' ‚Üê propBool p,
      _precon e1 `has` p',
      _postcon e1 == removeProp p' (_precon e1) ‚Üí return Valid
    | otherwise ‚Üí return NotValid

-- | Check if a proof is valid
checkProof ‚à∑ StringProof ‚Üí IO ProofValidity
checkProof = go Valid []
  where
    go NotValid _ _ = return NotValid
    go validity _ [] = return validity
    go validity proven (x:xs) =
      let continue = do
            stepValidity ‚Üê validProofStep x
            go (min validity stepValidity) (proofToTriple x : proven) xs
          known = (`elem` proven)
      in if all known (containedTriples x) then continue else return NotValid

instance (Show ŒΩ, Pretty ŒΩ) ‚áí Pretty (HoareTriple ŒΩ) where
  pretty (Hoare precon code postcon) = vsep [ braces (pretty precon)
                                            , pretty code
                                            , braces (pretty postcon)
                                            ]

